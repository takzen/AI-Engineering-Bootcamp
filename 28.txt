Moduł 4, lekcja 28: Praktyczne przykłady skutecznego promptowania

Teoria jest ważna, ale nic nie uczy tak dobrze, jak praktyka. W tej lekcji przejdziemy przez kilka konkretnych scenariuszy, pokazując, jak różnica między słabym a dobrze zaprojektowanym promptem prowadzi do diametralnie różnych wyników. Skupimy się na zadaniach, z którymi jako analitycy danych spotykamy się na co dzień.

1. Zadanie: Podsumowanie długiego tekstu

Wyobraź sobie, że dostajesz raport lub artykuł i musisz szybko zrozumieć jego kluczowe przesłanie.

    Kontekst: Mamy fragment raportu finansowego. Chcemy z niego wyciągnąć najważniejsze informacje dla zarządu.

    Fragment tekstu: "W trzecim kwartale 2023 roku, spółka 'Innowacje Cyfrowe S.A.' odnotowała znaczący wzrost przychodów o 22% w ujęciu rocznym, osiągając pułap 15,2 mln PLN. Głównym motorem napędowym tego wzrostu był segment oprogramowania chmurowego, który zanotował dynamikę na poziomie 35%. Koszty operacyjne wzrosły o 15% z powodu inwestycji w nową infrastrukturę serwerową oraz zwiększenia zatrudnienia w dziale R&D. Mimo to, zysk netto spółki wzrósł o 18% do 3,4 mln PLN. Spółka z optymizmem patrzy w przyszłość, prognozując dalszy wzrost w segmencie chmurowym, chociaż spodziewa się rosnącej presji konkurencyjnej."

Słaby Prompt:

    Zrób streszczenie tego tekstu.

    Potencjalny wynik: Ogólne, mało konkretne streszczenie, np. "Spółka Innowacje Cyfrowe S.A. miała dobry kwartał, ze wzrostem przychodów i zysków, głównie dzięki oprogramowaniu chmurowemu."

Dobry Prompt:

    Działając jako analityk finansowy, przygotuj dla zarządu podsumowanie poniższego raportu. Przedstaw kluczowe wnioski w formie 4-punktowej listy. Każdy punkt powinien zawierać konkretne dane liczbowe. Skup się na przychodach, kosztach, zysku netto i głównym czynniku wzrostu.

    Oczekiwany, precyzyjny wynik:

        Przychody wzrosły o 22% r/r, osiągając 15,2 mln PLN.

        Głównym motorem wzrostu był segment oprogramowania chmurowego z dynamiką +35%.

        Koszty operacyjne wzrosły o 15% w związku z inwestycjami i zatrudnieniem.

        Zysk netto zwiększył się o 18%, osiągając poziom 3,4 mln PLN.

2. Zadanie: Ekstrakcja danych strukturalnych z tekstu

To kluczowe zadanie w analizie danych – zamiana nieustrukturyzowanego tekstu na dane, które można załadować np. do tabeli w bazie danych lub ramki danych w pandas.

    Kontekst: Mamy ten sam fragment raportu, ale tym razem chcemy wyciągnąć z niego dane w ustandaryzowanym formacie.

Słaby Prompt:

    Wyciągnij z tego dane finansowe.

    Potencjalny wynik: Chaotyczna lista liczb i faktów, np. "22%, 15,2 mln PLN, 35%, 15%, 18%, 3,4 mln PLN". Trudne do dalszego przetwarzania.

Dobry Prompt:

    Przeanalizuj poniższy tekst i wyodrębnij z niego kluczowe dane finansowe. Zwróć wynik wyłącznie w formacie JSON. Użyj następujących kluczy: "nazwa_firmy", "okres_raportu", "przychody_mln_pln", "wzrost_przychodow_proc", "zysk_netto_mln_pln", "wzrost_zysku_proc". Wartości liczbowe przedstaw jako float, a nie string.

    Oczekiwany, precyzyjny wynik:
    Generated json

          
    {
      "nazwa_firmy": "Innowacje Cyfrowe S.A.",
      "okres_raportu": "Q3 2023",
      "przychody_mln_pln": 15.2,
      "wzrost_przychodow_proc": 22.0,
      "zysk_netto_mln_pln": 3.4,
      "wzrost_zysku_proc": 18.0
    }

        

    IGNORE_WHEN_COPYING_START

    Use code with caution. Json
    IGNORE_WHEN_COPYING_END

    Ten wynik można od razu wczytać i przetwarzać w Pythonie.

3. Zadanie: Generowanie kodu w Pythonie

LLM-y to fantastyczni asystenci programistów, o ile wiemy, jak ich o to poprosić.

    Kontekst: Potrzebujemy funkcji, która wczyta plik CSV i obliczy średnią wartość w konkretnej kolumnie.

Słaby Prompt:

    Napisz funkcję w Pythonie, która liczy średnią z kolumny w pliku CSV.

    Potencjalny wynik: Prosta, być może niekompletna funkcja, bez obsługi błędów, bez komentarzy i używająca wbudowanego modułu csv, który jest mniej wygodny niż pandas.

Dobry Prompt:

    Działaj jak doświadczony programista Python specjalizujący się w analizie danych. Napisz funkcję o nazwie oblicz_srednia_z_kolumny.
    Funkcja powinna:

        Przyjmować dwa argumenty: sciezka_do_pliku (string) i nazwa_kolumny (string).

        Używać biblioteki pandas do wczytania pliku CSV do ramki danych.

        Obsługiwać błędy: jeśli plik nie istnieje (FileNotFoundError) lub kolumna nie istnieje (KeyError), funkcja powinna zwrócić None i wydrukować stosowny komunikat.

        Zwracać średnią wartość z podanej kolumny jako liczbę zmiennoprzecinkową.

        Zawierać czytelny docstring wyjaśniający jej działanie, argumenty i zwracaną wartość.

    Oczekiwany, precyzyjny wynik:
    Generated python

          
    import pandas as pd

    def oblicz_srednia_z_kolumny(sciezka_do_pliku: str, nazwa_kolumny: str) -> float | None:
        """
        Wczytuje plik CSV i oblicza średnią wartość dla podanej kolumny.

        Args:
            sciezka_do_pliku (str): Ścieżka do pliku CSV.
            nazwa_kolumny (str): Nazwa kolumny, dla której ma być obliczona średnia.

        Returns:
            float | None: Średnia wartość z kolumny lub None w przypadku błędu.
        """
        try:
            df = pd.read_csv(sciezka_do_pliku)
            srednia = df[nazwa_kolumny].mean()
            return float(srednia)
        except FileNotFoundError:
            print(f"Błąd: Plik '{sciezka_do_pliku}' nie został znaleziony.")
            return None
        except KeyError:
            print(f"Błąd: Kolumna '{nazwa_kolumny}' nie istnieje w pliku.")
            return None

        

    IGNORE_WHEN_COPYING_START

    Use code with caution. Python
    IGNORE_WHEN_COPYING_END

Podsumowanie i złote zasady praktyki

Jak widać na powyższych przykładach, precyzja czyni mistrza. Dobry prompt to nie dłuższy prompt, ale mądrzejszy prompt.

Złote zasady, które warto stosować:

    Iteruj i poprawiaj: Rzadko kiedy pierwszy prompt jest idealny. Traktuj to jak rozmowę – jeśli pierwsza odpowiedź jest zła, przeformułuj prompt, dodając więcej szczegółów.

    Bądź ekstremalnie specyficzny: Zamiast "napisz tekst", powiedz "napisz 3 zdania w stylu formalnym...". Im więcej konkretów, tym lepiej.

    Myśl jak programista (nawet przy zadaniach nietechnicznych): Definiuj dane wejściowe (kontekst), logikę (zadanie, rola) i oczekiwany format wyjściowy.

    Nie bój się długich promptów: Lepiej dać modelowi 5 zdań precyzyjnego kontekstu i instrukcji niż jedno zdanie ogólnika.

    Testuj różne modele: Ten sam prompt może dać nieco inne wyniki w zależności od modelu (np. GPT-4 vs. Claude 3 vs. Llama 3). Warto sprawdzić, który model najlepiej "rozumie" Twoje intencje.